generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  portfolios       Portfolio[]
  transactions     Transaction[]
  depositHistories DepositHistory[]
  withdrawalHistories WithdrawalHistory[]
  tradingAccounts  TradingAccount[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Portfolio {
  id        String   @id @default(cuid())
  userId    String
  symbol    String
  name      String
  balance   Float    @default(0)
  value     Float    @default(0)
  change24h Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, symbol])
}

model Transaction {
  id          String          @id @default(cuid())
  userId      String
  type        TransactionType
  symbol      String
  amount      Float
  price       Float
  total       Float
  status      TransactionStatus @default(PENDING)
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DepositHistory {
  id          String        @id @default(cuid())
  userId      String
  amount      Float
  currency    String
  method      String
  status      DepositStatus @default(PENDING)
  txHash      String?
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WithdrawalHistory {
  id            String           @id @default(cuid())
  userId        String
  amount        Float
  currency      String
  address       String
  status        WithdrawalStatus @default(PENDING)
  txHash        String?
  fee           Float            @default(0)
  netAmount     Float
  description   String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TradingAccount {
  id          String   @id @default(cuid())
  userId      String
  accountType String
  balance     Float    @default(0)
  equity      Float    @default(0)
  margin      Float    @default(0)
  freeMargin  Float    @default(0)
  leverage    Float    @default(1)
  profit      Float    @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MarketData {
  id        String   @id @default(cuid())
  symbol    String   @unique
  name      String
  price     Float
  change24h Float
  volume24h Float
  high24h   Float
  low24h    Float
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum TransactionType {
  BUY
  SELL
  DEPOSIT
  WITHDRAWAL
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum DepositStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum WithdrawalStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}